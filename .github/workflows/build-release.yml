name: Build and Release

on:
  push:
    tags:
      - 'adl-lsp-*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: adl-lsp-linux-x64
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_name: adl-lsp-macos-x64
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: adl-lsp-macos-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@1.85.1
        with:
          targets: ${{ matrix.target }}

      - name: Install target
        run: rustup target add ${{ matrix.target }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build binary
        run: |
          cd rust/adl-lsp
          cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_DIR: ${{ github.workspace }}/rust/adl-lsp/target

      - name: Prepare binary for release
        run: |
          cd rust/adl-lsp
          cp target/${{ matrix.target }}/release/adl-lsp ${{ matrix.artifact_name }}

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: rust/adl-lsp/${{ matrix.artifact_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/adl-lsp-')
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: extract_version
        run: |
          # Extract version from tag (e.g., adl-lsp-0.8.2 -> 0.8.2)
          VERSION=${GITHUB_REF#refs/tags/adl-lsp-}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "adl-lsp ${{ steps.extract_version.outputs.version }}"
          files: |
            artifacts/adl-lsp-linux-x64
            artifacts/adl-lsp-macos-x64
            artifacts/adl-lsp-macos-arm64
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
