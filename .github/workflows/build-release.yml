name: release

# Only do the release on adl-lsp-x.y.z tags or manual workflow dispatch.
on:
  push:
    tags:
    - "adl-lsp-[0-9]+.[0-9]+.[0-9]+"
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag (e.g., adl-lsp-0.8.3) or version (e.g., 0.8.3)'
        required: true
        type: string

# We need this to be able to create releases.
permissions:
  contents: write

jobs:
  # The create-release job runs purely to initialize the GitHub release itself,
  # and names the release after the `x.y.z` tag that was pushed. It's separate
  # from building the release so that we only create the release once.
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get the release version from the tag or workflow dispatch
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # Extract version from git tag (e.g., adl-lsp-0.8.2 -> 0.8.2)
            VERSION=${GITHUB_REF#refs/tags/adl-lsp-}
          else
            # Use version from workflow_dispatch input
            INPUT_VERSION="${{ github.event.inputs.release_tag }}"
            # Remove the adl-lsp- prefix if it exists
            VERSION=${INPUT_VERSION#adl-lsp-}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"
      - name: Show the version
        run: |
          echo "version is: $VERSION"
      - name: Check that tag version and Cargo.toml version are the same
        shell: bash
        run: |
          if ! grep -q "version = \"$VERSION\"" rust/adl-lsp/Cargo.toml; then
            echo "version does not match Cargo.toml" >&2
            exit 1
          fi
      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            gh release create $VERSION --draft --verify-tag --title $VERSION
          else
            gh release create "adl-lsp-$VERSION" --draft --title "adl-lsp $VERSION"
          fi
    outputs:
      version: ${{ env.VERSION }}
      release_tag: ${{ github.event_name == 'push' && env.VERSION || format('adl-lsp-{0}', env.VERSION) }}

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env:
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      fail-fast: false
      matrix:
        include:
        - build: macos-x86
          os: macos-latest
          rust: nightly
          target: x86_64-apple-darwin
        - build: macos-arm
          os: macos-latest
          rust: stable
          target: aarch64-apple-darwin
        - build: linux-x86
          os: ubuntu-latest
          rust: stable
          target: x86_64-unknown-linux-gnu

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build release binary
      shell: bash
      run: |
        # Install Rust toolchain with target
        rustup toolchain install ${{ matrix.rust }} --profile minimal
        rustup override set ${{ matrix.rust }}
        
        # Add the target explicitly (needed for cross-compilation)
        rustup target add ${{ matrix.target }} --toolchain ${{ matrix.rust }}
        
        # Show debugging info
        echo "Matrix target: ${{ matrix.target }}"
        echo "Matrix os: ${{ matrix.os }}"
        echo "Matrix build: ${{ matrix.build }}"
        echo "Current rustup default:"
        rustup show
        echo "Installed targets:"
        rustup target list --installed
        
        # Build the binary using the explicit toolchain
        cd rust/adl-lsp
        cargo +${{ matrix.rust }} build --verbose --release --target ${{ matrix.target }}
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          bin="target/${{ matrix.target }}/release/adl-lsp.exe"
        else
          bin="target/${{ matrix.target }}/release/adl-lsp"
        fi
        echo "BIN=$bin" >> $GITHUB_ENV

    - name: Strip release binary (macos)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        cd rust/adl-lsp
        strip "$BIN"

    - name: Strip release binary (linux)
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        cd rust/adl-lsp
        strip "$BIN"

    - name: Set executable permissions
      shell: bash
      run: |
        cd rust/adl-lsp
        chmod +x "$BIN"

    - name: Determine archive name
      shell: bash
      run: |
        version="${{ needs.create-release.outputs.version }}"
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
          if [ "${{ matrix.target }}" = "x86_64-apple-darwin" ]; then
            platform="macos-x64"
          else
            platform="macos-arm64"
          fi
        else
          if [ "${{ matrix.target }}" = "x86_64-unknown-linux-gnu" ]; then
            platform="linux-x64"
          else
            platform="linux-arm64"
          fi
        fi
        echo "ARCHIVE=adl-lsp-$version-$platform" >> $GITHUB_ENV

    - name: Creating directory for archive
      shell: bash
      run: |
        cd rust/adl-lsp
        mkdir -p "$ARCHIVE"
        cp "$BIN" "$ARCHIVE"/adl-lsp
        cp ../../README.md "$ARCHIVE"/

    - name: Set executable permissions in archive
      shell: bash
      run: |
        cd rust/adl-lsp
        chmod +x "$ARCHIVE/adl-lsp"

    - name: Build archive (macOS)
      shell: bash
      if: matrix.os == 'macos-latest'
      run: |
        cd rust/adl-lsp
        tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
        shasum -a 256 "$ARCHIVE.tar.gz" > "$ARCHIVE.tar.gz.sha256"
        echo "ASSET=$ARCHIVE.tar.gz" >> $GITHUB_ENV
        echo "ASSET_SUM=$ARCHIVE.tar.gz.sha256" >> $GITHUB_ENV

    - name: Build archive (Linux)
      shell: bash
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd rust/adl-lsp
        tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
        shasum -a 256 "$ARCHIVE.tar.gz" > "$ARCHIVE.tar.gz.sha256"
        echo "ASSET=$ARCHIVE.tar.gz" >> $GITHUB_ENV
        echo "ASSET_SUM=$ARCHIVE.tar.gz.sha256" >> $GITHUB_ENV

    - name: Upload release archive
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash
      run: |
        cd rust/adl-lsp
        version="${{ needs.create-release.outputs.version }}"
        release_tag="${{ needs.create-release.outputs.release_tag }}"
        echo "Uploading $ASSET and $ASSET_SUM for version $version to release $release_tag"
        ls -la
        gh release upload "$release_tag" ${{ env.ASSET }} ${{ env.ASSET_SUM }}
